<?php

/**
 * BlockBase is the base class for the 'blocks' system. simply extend this class to use.
 *
 * @author aljo fabro <acfabro@gmail.com>
 * @package blocks
 */

//require_once(SYSCONFIG_ROOT_PATH.'configurations/smarty/Smarty.class.php');

/**
 * BlockBase is the base class for the 'blocks' system. simply extend this class to use.
 */
class BlockBasePHP {

	/**
	 * Array containing parameters passed to the block. Parameters may be used by blocks internally or externally by other functions.
	 * @var array Array of parameters. Parameter list depends on the implementation.
	 */
	var $params;

	var $templateTheme;

	/**
	 * The filename of the template file, without path
	 * @var string Filename of the template file (*.tpl)
	 */
	var $templateFile;

	/**
	 * The directory for theme files
	 * @var String dir location
	 */
	var $templateDir;

	var $listVars;

	/**
	 * Constructor
	 */
	function BlockBasePHP() {

		// smarty init
		// parent::Smarty();
		$this->params = array();
		$this->listVars = array();

		// default theme
		$this->templateTheme = SYSCONFIG_THEME;

		$this->config_dir  = SYSCONFIG_COMMON_PATH;

		// dir locations
		$this->assign('SYSCONFIG_ROOT_PATH',SYSCONFIG_ROOT_PATH);
		$this->assign('SYSCONFIG_CLASS_PATH',SYSCONFIG_CLASS_PATH);
		$this->assign('SYSCONFIG_MODULE_PATH',SYSCONFIG_MODULE_PATH);
		$this->assign('SYSCONFIG_URL_PATH',SYSCONFIG_URL_PATH);
		$this->assign('SYSCONFIG_IMAGE_PATH',SYSCONFIG_IMAGE_PATH);

		// template specific dirs
		$this->templateDir = SYSCONFIG_THEME_PATH.$this->templateTheme.'/templates/';
		$this->assign('themeImagesPath',SYSCONFIG_THEME_URLPATH.$this->templateTheme."/images/");
		$this->assign('themeCSSPath',SYSCONFIG_THEME_URLPATH.$this->templateTheme."/css/");
		$this->assign("themePath",SYSCONFIG_THEME_PATH.$this->templateTheme."/");
		$this->assign("themeUrlPath",SYSCONFIG_THEME_URLPATH.$this->templateTheme."/");
		if(isset($_SESSION['config_global']['JQUERY_PATH']))
		$this->assign("themeJQueryPath",$_SESSION['config_global']['JQUERY_PATH']."/");
		$this->assign("appTitle",SYSCONFIG_TITLE);
		$this->assign("companyName",SYSCONFIG_COMPANY);
	}

	function assign($name, $val) {
		$this->listVars[$name] = $val;
	}

	/**
	 * Sets a block's parameter.
	 * @param string $pname Parameter name
	 * @param mixed $pvalue Parameter value
	 */
	function setParam( $pname, $pvalue ) {
		$this->params[$pname] = $pvalue;
	}

	/**
	 * Unsets a block's parameter.
	 * @param string $pname Parameter name
	 * @param mixed $pvalue Parameter value
	 */
	function unsetParam( $pname ) {
		unset($this->params[$pname]);
	}

	/**
	 * Retrieves a parameter from the block's parameter list
	 * @param string $pname Parameter
	 * @return mixed
	 */
	function getParam( $pname ) {
		return isset($this->params[$pname])?$this->params[$pname]:null;
	}

	/**
	 * Passes parameters from the data array and to the smarty template. May be overridden to bind other parameters to the template.
	 */
	function bindParams() {
		foreach ( $this->params as $pname => $pvalue ) {
			$this->assign($pname,$pvalue);
		}
	}

	/**
	 * Calls bindParams(). May be overridden to bind other variables to the template.
	 */
	function process() {
		$this->bindParams();

	}

	/**
	 * Return html generated by the Smarty engine without displaying the output.
	 * @return string HTML generated by the Smarty engine.
	 */
	function fetchBlock() {
		$this->process();

		ob_start();
		foreach ($this->listVars as $varName => $varValue) {
			${$varName} =& $this->listVars[$varName];
		}
//		$lstVar = $this->listVars;
		include($this->templateDir.'/'.$this->templateFile);
		$content = ob_get_clean();

		return $content;
	}

	/**
	 * Renders and displays the HTML output of the block.
	 */
	function displayBlock() {
		print $this->fetchBlock();
	}

}



/**
 * HTML HELPER MODULE
 */

/**
 * html_options list using an array
 *
 * @param array $options_
 * @param string $selected_
 * @param bool $useKeys_
 * @return string
 */
function html_options($options_ , $selected_ = null, $useKeys_ = true){
	$tOptions="";
	$prim_key = $_SESSION['prim_key'];
	if (!is_array($options_)) return null;
	
	if ($useKeys_) {
		foreach ($options_ as $key => $value) {
			$selected = ($selected_==$key)?"selected='selected'":"";
			$tOptions .= "<option id='opt_".$key."' value='$key' $selected>$value</option>";
		}	
	}else{
		foreach ($options_ as $value) {
			$selected = ($selected_==$value)?"selected='selected'":"";
			$tOptions .= "<option id='opt_$value' value='$value' $selected>$value</option>";
		}
	}
	$selected_ = $selected_=='N/A'?'selected=true':'';
//	$tOptions .= "<option value='0' ".$selected_.">N/A</option>";
	return $tOptions;
}


/**
*2D Array
*/
function html_options2($options_ ,$key='', $field='', $selected='', $idname='',$useKeys_ = true){
	$tOptions="";
	if (!is_array($options_)) return null;
	//$selected = isset($_GET[$field])?$_GET[$field]:'';
	if ($useKeys_) {
		$x=0;
		foreach ($options_ as $name => $value) {
			$sel = $key[$x]==$selected?'selected=true':'';
			$tOptions .= "<option id='".$idname."_".$key[$x]."' value='".$key[$x]."' ".$sel.">".$value."</option>";
			$x++;
		}
		$selected = $selected=='N/A'?'selected=true':'';
//		$tOptions .= "<option value='N/A' ".$selected.">N/A</option>";
	}
	return $tOptions;
}

/**
*3D Array
*/
function html_options3($array_options, $str_id='', $str_value='', $id_selected='', $id_name=''){
	$tOptions="";
	$x = 0;
	foreach ($array_options as $opt){   	
		$sel = $array_options[$x][$str_id]==$id_selected?'selected=true':'';
		$tOptions .= "<option id='".$id_name."_".$array_options[$x][$str_id]."' value='".$array_options[$x][$str_id]."' ".$sel.">".$array_options[$x][$str_value]."</option>";
		$x++;
	}
	$selected = $id_selected == 'N/A'?'selected=true':'';
	$tOptions .= "<option value='N/A' ".$selected.">N/A</option>";
	return $tOptions;
}

function html_options4($array_options, $str_id='', $str_value='', $id_selected='', $id_name=''){
	$tOptions="";
	$x = 0;
	foreach ($array_options as $opt){   	
		$sel = $array_options[$x][$str_id]==$id_selected?'selected=true':'';
		$tOptions .= "<option id='".$id_name."_".$array_options[$x][$str_id]."' value='".$array_options[$x][$str_id]."' ".$sel.">".$array_options[$x][$str_value]."</option>";
		$x++;
	}
	return $tOptions;
}

/**
* Blood Type
*/
function blood_type($selected = ''){
	$types = array('A+','A-','A','B+','B-','B','AB+','AB-','AB','O+','O-','O','Unknown');
		
	foreach($types as $name){
		$sel = ($name==$selected)?'selected=true':'';
		$options .= "<option ".$sel." value='".$name."'>".$name."</option>";
	}
	return $options;
}

/**
* Civil Status
*/
function civil_status($selected = ''){
	$types = array('Single','Married','Separated','Annulled','Divorced','Widowed','Widower','Prefer not to answer');
		
	foreach($types as $name){
		$sel = ($name==$selected)?'selected=true':'';
		$options .= "<option ".$sel." value='".$name."'>".$name."</option>";			
	}
	return $options;
}

/**
* Dependent Relation
*/
function dependent_relation($selected = ''){
	$types = array('Son','Daughter');
		
	foreach($types as $name){
		$sel = ($name==$selected)?'selected=true':'';
		$options .= "<option ".$sel." value='".$name."'>".$name."</option>";
	}
	return $options;
}

//calculate years of age (input string: YYYY-MM-DD)
function birthday ($birthday) {
	list($year,$month,$day) = explode("-",$birthday);
	$year_diff  = date("Y") - $year;
	$month_diff = date("m") - $month;
	$day_diff   = date("d") - $day;
	if ($day_diff < 0 || $month_diff < 0)
	  $year_diff--;
	return $year_diff;
}

/**
* Religion
*/
function religion($selected = ''){
	$general = "African Traditional & Diasporic,Agnostic,Atheist,Baha'i,Buddhism,Cao Dai,Chinese traditional religion,Christianity,Hinduism,Jainism,Juche,Judaism,Neo-Paganism,Nonreligious,Rastafarianism,Secular,Shinto,Sikhism,Spiritism,Tenrikyo,Unitarian-Universalism,Zoroastrianism,primal-indigenous,Other,N/A";
	$world = explode(',' , $general);
	
	$religions = array(
	 'Philippines' => array('Roman Catholic','Islam','Aglipayan','Iglesia ni Cristo','Evangelical','Protestants','Philippine Independent Church')
	,'World'       => array('African Traditional & Diasporic','Agnostic','Atheist','Baha\'i','Buddhism','Cao Dai','Chinese traditional religion','Christianity','Hinduism','Jainism','Juche','Judaism','Neo-Paganism','Nonreligious','Rastafarianism','Secular','Shinto','Sikhism','Spiritism','Tenrikyo','Unitarian-Universalism','Zoroastrianism','primal-indigenous','Other','N/A'));
		
	foreach($religions as $name => $narrow){
		$options .= "<optgroup label='".$name."'>";
		foreach($narrow as $rel){
			$sel = ($rel==$selected)?'selected=true':'';
			$options .= "<option ".$sel." value='".$rel."'>".$rel."</option>";	
		}	
		$options .= "</optgroup>";
	}
	return $options;
}

/**
* Race
*/
function race_($selected = ''){
	$nationalities = "Afghan,Albanian,Algerian,American,Andorran,Angolan,Antiguans,Argentinean,Armenian,Australian,Austrian,Azerbaijani,Bahamian,Bahraini,Bangladeshi,Barbadian,Barbudans,Batswana,Belarusian,Belgian,Belizean,Beninese,Bhutanese,Bolivian,Bosnian,Brazilian,British,Bruneian,Bulgarian,Burkinabe,Burmese,Burundian,Cambodian,Cameroonian,Canadian,Cape Verdean,Central African,Chadian,Chilean,Chinese,Colombian,Comoran,Congolese,Congolese,Costa Rican,Croatian,Cuban,Cypriot,Czech,Danish,Djibouti,Dominican,Dominican,Dutch,Dutchman,Dutchwoman,East Timorese,Ecuadorean,Egyptian,Emirian,Equatorial Guinean,Eritrean,Estonian,Ethiopian,Fijian,Filipino,Finnish,French,Gabonese,Gambian,Georgian,German,Ghanaian,Greek,Grenadian,Guatemalan,Guinea-Bissauan,Guinean,Guyanese,Haitian,Herzegovinian,Honduran,Hungarian,I-Kiribati,Icelander,Indian,Indonesian,Iranian,Iraqi,Irish,Irish,Israeli,Italian,Ivorian,Jamaican,Japanese,Jordanian,Kazakhstani,Kenyan,Kittian and Nevisian,Kuwaiti,Kyrgyz,Laotian,Latvian,Lebanese,Liberian,Libyan,Liechtensteiner,Lithuanian,Luxembourger,Macedonian,Malagasy,Malawian,Malaysian,Maldivan,Malian,Maltese,Marshallese,Mauritanian,Mauritian,Mexican,Micronesian,Moldovan,Monacan,Mongolian,Moroccan,Mosotho,Motswana,Mozambican,Namibian,Nauruan,Nepalese,Netherlander,New Zealander,Ni-Vanuatu,Nicaraguan,Nigerian,Nigerien,North Korean,Northern Irish,Norwegian,Omani,Pakistani,Palauan,Panamanian,Papua New Guinean,Paraguayan,Peruvian,Polish,Portuguese,Qatari,Romanian,Russian,Rwandan,Saint Lucian,Salvadoran,Samoan,San Marinese,Sao Tomean,Saudi,Scottish,Senegalese,Serbian,Seychellois,Sierra Leonean,Singaporean,Slovakian,Slovenian,Solomon Islander,Somali,South African,South Korean,Spanish,Sri Lankan,Sudanese,Surinamer,Swazi,Swedish,Swiss,Syrian,Taiwanese,Tajik,Tanzanian,Thai,Togolese,Tongan,Trinidadian,Tunisian,Turkish,Tuvaluan,Ugandan,Ukrainian,Uruguayan,Uzbekistani,Venezuelan,Vietnamese,Welsh,Welsh,Yemenite,Zambian,Zimbabwean";
	$n = explode(",", $nationalities);
	
	foreach($n as $name){
		$sel = ($name==$selected)?'selected':'';
		$options .= "<option ".$sel." value='".$name."'>".$name."</option>";			
	}
	return $options;
}

/**
* Nationality
*/
function nationality($selected = ''){
	$nationalities = "Australian,Brunei,China,Indonesia,Japan,Malaysia,New Zealand,Philippines,Singapore,Taiwan,Thailand,United Kingdom,United State of America,Vietnam,N/A";
	$n = explode(",", $nationalities);
	
	foreach($n as $name){
		$sel = ($name==$selected)?'selected':'';
		$options .= "<option ".$sel." value='".$name."'>".$name."</option>";			
	}
	return $options;
}

/**
* Calendar: 
*/
function calendar($opt='',$selected=''){

$ys = 2000;
$ye = 2025;

$m = array('January','February','March','April','May','June','July','August','September','October','November','December','N/A');
$d = array('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','N/A');

	if($opt=='month'){
		foreach($m as $name){
			$sel = ($name==$selected)?'selected=true':'';
			$options .= "<option  value='".$name."' ".$sel.">".$name."</option>";			
		}
	}else if($opt=='day'){
		foreach($d as $name){
			$sel = ($name==$selected)?'selected=true':'';
			$options .= "<option value='".$name."'  ".$sel.">".$name."</option>";			
		}
	}else if($opt=='date'){
		for($x=1; $x<32; $x++){
			$sel = ($x==$selected)?'selected=true':'';
			$options .= "<option  value='".$x."' ".$sel.">".$x."</option>";			
		}
		$selected = $selected=='N/A'?'selected=true':'';
		$options .= "<option value='N/A' ".$selected.">N/A</option>";	
	}else if($opt=='year'){
		for($x=$ys; $x<=$ye; $x++){
			$sel = ($x==$selected)?'selected=true':'';
			$options .= "<option value='".$x."' ".$sel." >".$x."</option>";			
		}
	    $selected = $selected=='N/A'?'selected=true':'';
		$options .= "<option value='N/A' ".$selected.">N/A</option>";	
	}
	return $options;
}

/**
 * html_options list using a 2D array
 *
 * @param array $options_
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $selected_
 * @param bool $useKeys_
 * @return string
 */
function html_options_2d($options_ ,$keyValue_ , $keyOutput_ , $selected_ = null, $useKeys_ = true){
	$tOptions="";
	
	if (!is_array($options_)) return null;
	
	if ($useKeys_){
		foreach ($options_ as $key => $value){
			$selected = ($selected_==$key)?"selected='true'":"";
			$tOptions .= "<option value='$key' $selected>$value[$keyOutput_]</option>";
		}
	}else{
		foreach ($options_ as $value){
			$selected = ($selected_==$value[$keyValue_])?"selected='true'":"";
			$tOptions .= "<option value='$value[$keyValue_]' $selected>$value[$keyOutput_]</option>";
		}
	}
	$selected_ = $selected_=='N/A'?'selected=true':'';
	$tOptions .= "<option value='N/A' ".$selected_.">N/A</option>";
	return $tOptions;
}

/**
 * html_text texbox: exclusive for assigning textbox with value in joborder_form(edit)
 *
 * @param array $arrOdata
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $tsg_id
 * @param array $oData_i
 * @param int $ctr_i
 * @return string
 */
function html_text($arrOdata ,$keyValue_ , $keyOutput_ , $tsg_id, $oData_i, $ctr_i) {
	$tBox="";
	$selected="";
	
	if (!is_array($arrOdata)) return null;
	
	$tBox.="<table border='0' cellpadding='0' cellspacing='2'>";
	
			foreach ($arrOdata as $key => $value) {
				$selected= ($value['tsg_id']==$tsg_id)?true:"";
				$tsid = $value['ts_id'];
				$val = ($oData_i[$tsid]!="")?"value='$oData_i[$tsid]'":"value=''";
				
				if($selected!=""){
						
					if($i % 5==0){
						$tBox .="</tr>";
						$tBox .="<tr>";
						$tBox .="<td>$value[$keyOutput_]</td>";
						$tBox .="<td><input type='text' name='size[$ctr_i][$tsid]' id='size[$ctr_i][$tsid]' value='$oData_i[$tsid]' /></td>";
					}else {
						$tBox .="<td>$value[$keyOutput_]</td>";
						$tBox .="<td><input type='text' name='size[$ctr_i][$tsid]' id='size[$ctr_i][$tsid]' value='$oData_i[$tsid]' /></td>";
					}
					$i++;
				}
			}
	$tBox.="</table>";
	return $tBox;
}
/**
 * html_tdsize: exclusive for jo_printing form
 *
 * @param array $arrOdata
 * @param string $keyValue_
 * @param string $keyOutput_
 * @param string $tsg_id
 * @param array $oData_i
 * @param int $ctr_i
 * @return string
 */
function html_tdsize($arrOdata ,$keyValue_ , $keyOutput_ ,$oData_i) {
	$ctr_cc=0;

	$tBox="";
	$selected="";
	$ctrtotal =0;
	$ctrtotalqty=0;
	$ctrindex=0;


	do { 
	if (!is_array($arrOdata)) return null;
	
	//header
	$tBox .="<table width='100%' cellspacing='1' cellpadding='2' bgcolor='#000000' border='0'>";
	$tBox .="<tr bgcolor='#298EBD'>";
    $tBox .="<td width='15%' align='center'>Color</td>";
	
    $tBox .="<td width='85%' align='center'>";
	$tBox .="	<table border='0' width='100%'>";
    $tBox .="	<tr>";
	foreach ($arrOdata as $key => $value) {
	
				$selected= ($value['tsg_id']==$oData_i[$ctr_cc][1])?true:"";
				$tsid = $value['ts_id'];
				$ctrindex++;
				
				if($selected!=""){
    				$tBox .="	<td align='center' width='5%'>$value[$keyOutput_]</td>";
				}
	}
    $tBox .="	<td width='10%' align='center'>TOTAL</td>";
    $tBox .="	</tr>";
    $tBox .="</table>";
	$tBox .="</td>";
    $tBox .="</tr>";
	//contents
	$ctrtotal = $ctrtotal + $oData_i[$tsid];
	$tBox .="<tr bgcolor='#FFFFFF'>";
    $tBox .="<td width='15%' align='center'>".$oData_i[$ctr_cc][0]."</td>";
	
    $tBox .="<td width='85%' align='center'>";
	$tBox .="	<table border='0' width='100%'>";
    $tBox .="	<tr>";

	foreach ($arrOdata as $key_i => $value_i) {

				$selected= ($value_i['tsg_id']==$oData_i[$ctr_cc][1])?true:"";
				$tsid_i = $value_i['ts_id'];
				
				if($selected!=""){
			
    				$tBox .="	<td align='center'  width='5%'>".$oData_i[$ctr_cc][2][$tsid_i]."</td>";
					$ctrtotal = $ctrtotal + $oData_i[$ctr_cc][2][$tsid_i];
				}
	}
    $tBox .="	<td width='10%' align='center'>$ctrtotal</td>";
    $tBox .="	</tr>";
    $tBox .="</table>";
	$tBox .="</td>";
    $tBox .="</tr>";
			
	
	$tBox .="</td>";
	$tBox .="</tr>";
	$tBox .="</table>";
	
	 $ctr_cc++; 
	} while($ctr_cc < sizeof($oData_i));
	return $tBox;
}

  function ordinal ($n) {
    $ln = (int) substr($n, -1);
    $sln = (int) substr($n, -2);
    $r = array('st','nd','rd');
    $es = (($sln < 11 || $sln > 19) && $ln > 0 && $ln < 4);
    return $n . ($es ? $r[$ln - 1] : 'th');
  }

  function setGeneralDecimalPlaces($value = 0){
		$sql = "SELECT set_decimal_places FROM app_settings WHERE set_name='General Decimal Settings'";
		$rsResult = $this->conn->Execute($sql);
		if(!$rsResult->EOF){
			return number_format($value, $rsResult->fields['set_decimal_places'],'.',',');
		}
	}
	
	function setFinalDecimalPlaces($value = 0){
		$sql = "SELECT set_decimal_places FROM app_settings WHERE set_name='Final Decimal Settings'";
		$rsResult = $this->conn->Execute($sql);
		if(!$rsResult->EOF){
			return number_format($value, $rsResult->fields['set_decimal_places'],'.',',');
		}
	}
	
function html_options_multiple($options_ , $selectAll_ = true, $useKeys_ = true){
	$tOptions="";
	$prim_key = $_SESSION['prim_key'];
	if (!is_array($options_)) return null;
	$selected = ($selectAll_ ? "selected='selected'":"");
	if ($useKeys_) {
		foreach ($options_ as $key => $value) {
			//$selected = ($selected_==$key)?"selected='selected'":"";
			$tOptions .= "<option id='opt_".$key."' value='$key' $selected>$value</option>";
		}	
	}else{
		foreach ($options_ as $value) {
			//$selected = ($selected_==$value)?"selected='selected'":"";
			$tOptions .= "<option id='opt_$value' value='$value' $selected>$value</option>";
		}
	}
	$selected_ = $selected_=='N/A'?'selected=true':'';
//	$tOptions .= "<option value='0' ".$selected_.">N/A</option>";
	return $tOptions;
}
?>